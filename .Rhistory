set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modfit <- train(chd ~ (age + alcohol + obesity + tobacco + typea + ldl) , method='glm', family='binomial', data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict(modfit$finalModel, newdata=testSA)
predict(modfit$finalModel, newdata=trainSA)
missClass(train$chd, predict(modfit$finalModel, newdata=trainSA))
missClass(trainSA$chd, predict(modfit$finalModel, newdata=trainSA))
modfit$results
modfit$pred
modfit$finalModel
modfit <- train(chd ~ (age + alcohol + obesity + tobacco + typea + ldl) , method='glm', family='binomial', data=trainSA)
warnings()
trainSA
trainSA$chd <- factor(trainSA$chd)
modfit <- train(chd ~ (age + alcohol + obesity + tobacco + typea + ldl) , method='glm', family='binomial', data=trainSA)
missClass(trainSA$chd, predict(modfit$finalModel, newdata=trainSA))
missClass(train$chd, predict(modfit$finalModel, newdata=trainSA))
missClass(testSA$chd, predict(modfit$finalModel, newdata=testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
set.seed(33833)
forestfit<-train(y~.,model='rf',data=vowel.train,prox=TRUE)
library(caret)
forestfit<-train(y~.,model='rf',data=vowel.train,prox=TRUE)
boostfit<-train(y~.,data=vowel.train,model='gbm',verbose=FLASE)
boostfit<-train(y~.,data=vowel.train,model='gbm',verbose=FALSE)
vowel.train$y
predict(forestfit$finalModel, newdata=vowel.test)
(predict(forestfit$finalModel, newdata=vowel.test) == vowel.test$y)/length(vowel.test$y)
sum(predict(forestfit$finalModel, newdata=vowel.test) == vowel.test$y)/length(vowel.test$y)
sum(predict(forestfit$finalModel, newdata=vowel.test) == vowel.test$y)
predict(forestfit$finalModel, newdata=vowel.test) == vowel.test$y)
predict(forestfit$finalModel, newdata=vowel.test) == vowel.test$y
predict(forestfit$finalModel, newdata=vowel.test)
confusionMatrix(predict(forestfit$finalModel, newdata=vowel.test), vowel.test$y)
confusionMatrix(predict(forestfit$finalModel, newdata=vowel.test), vowel.test$y)
confusionMatrix(round(predict(forestfit$finalModel, newdata=vowel.test)), vowel.test$y)
predict(forestfit$finalModel, newdata=vowel.test)
vowel.test$y
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
set.seed(33833)
vowelrf <- train(y ~ ., data = vowel.train, method = "rf")
rfout <- predict(vowelrf, newdata = vowel.test)
confusionMatrix(rfout, vowel.test$y)
vowelgbm <- train(y ~ ., data = vowel.train, method = "gbm")
rfout <- predict(vowelrf$finalModel, newdata = vowel.test)
confusionMatrix(rfout, vowel.test$y)
gbmout <- predict(vowelgbm$finalModel, newdata = vowel.test)
gbmout <- predict(vowelgbm$finalModel, newdata = vowel.test)
vowelgbm <- train(y ~ ., data = vowel.train, method = "gbm")
gbmout <- predict(vowelgbm$finalModel, newdata = vowel.test)
rm(list=ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
forestfit <- train(diagnosis ~ ., data=training, method='rf', prox=TRUE)
diagnosis
forestfit <- train(diagnosis ~ ., data=training, method='rf', prox=TRUE)
gbmfit <- train(diagnosis ~ ., data=training, method='gbm', verbose=FALSE)
ldafit <- train(diagnosis ~ ., data=training, method='lda')
preds <- data.fram(forestfit, gbmfit, ldafit, diagnosis=test$diagnosis)
preds <- data.frame(forestfit, gbmfit, ldafit, diagnosis=test$diagnosis)
preds <- data.frame(forestfit, gbmfit, ldafit, diagnosis=testing$diagnosis)
rfpred <- predict(forestfit$finalModel, testing$diagnosis)
rfpred <- predict(forestfit$finalModel, newdata=testing$diagnosis)
rfpred <- predict(forestfit$finalModel, newdata=testing)
rfpred <- predict(forestfit, newdata=testing)
gbmpred <- predict(gbmfit, testing)
ldapred <- predict(ldafit, testing)
preds <- data.frame(rfpred, gbmpred, ldapred, diagnosis=testing$diagnosis)
fit <- train(diagnosis ~ ., data=preds, method='rf', prox=TRUE)
finalpred <- predict(fit, preds)
confusionMatrix(finalpred, preds$diagnosis)
confusionMatrix(finalpred, preds$diagnosis)$Accuracy
confusionMatrix(finalpred, preds$diagnosis)
confusionMatrix(rfpred, testing$diagnosis)
confusionMatrix(gbmpred, testing$diagnosis)
confusionMatrix(ldapred, testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
names(getModelInfo())
fit <- train(CompressiveStrength ~ ., data=training, method='lasso')
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(caret)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
lassofit <- train(CompressiveStrength~., data=training, method='lasso')
install.package('elasticnet')
install.packages('elasticnet')
lassofit <- train(CompressiveStrength~., data=training, method='lasso')
?plot.enet
plot.enet(lassofit, xvar=penalty)
plot.enet(lassofit, xvar='penalty')
plot.enet(lassofit, xvar=c('penalty')
)
plot.enet(lassofit$finalModel, xvar='penalty')
plot.enet(lassofit$finalModel, xvar='penalty', use.color = TRUE)
library(lubridate)
install.packages('lubridate')
dat = read.csv('~/Downloads/gaData.csv')
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(lubridate)
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages('forecast')
batsfit <- bats(tstrain)
library(forecast)
batsfit <- bats(tstrain)
fore <- forecast(batsfit)
accuracy(fore, testing)
plot(fore)
lines(testing, color=RED)
lines(testing, color='RED')
accuracy(fore, testing)
fore$model
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
fit <- svm(CompressiveStrength~., data=concrete)
fit <- svm(CompressiveStrength~., data=testing)
fit <- svm(CompressiveStrength~., data=traiting)
fit <- svm(CompressiveStrength~., data=training)
pred <- predict(fit, testing)
sqrt(mean((testing$CompressiveStrength-pred)^2))
runif(10)
punif(10)\
punif(10)
dunif(10)
?runif
qunif(10)
sample(10)
sample(100000)
sample(1000000)
rand <- sample(1000000)
write(rand, 'integers', ncolumns = 1)
install.packages('shiny')
install.packages('slidify')
install.packages('devtools')
library(devtools)
install.library('httr', 'RCurl')
install.packages('httr', 'RCurl')
install.packages('httr', 'rcurl')
install.packages('httr', 'RCurl')
install.packages('devtools')
install.packages('devtools')
install.packages('devtools')
library(devtool)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifylib', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages('manipulate')
library(manipulate)
install.packages('rCharts')
require(rCharts)
install.packages('rCharts')
install_github('ramnathv/rCharts')
install.packages('rjson')
library('rCharts')
install_github('ropensci/plotly')
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data(airquality)
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text')
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
library(shiny)
shinyUI(pageWithSidebar(
headerPanel("Data science FTW!"),
sidebarPanel(
h2('Big text'),
h3('Sidebar')
),
mainPanel(
h3('Main Panel text')
)
))
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu',value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
install.packages('googleVis')
LIBRARY(DEVTOOLS)
library(devtools)
install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='aakashjain', token='43EAC9C4EFA1C919F5B8CB6E2949B499', secret='3IQuwMLpCwUYssUWv4imHsCNxQu8s17M4Tpe7qW9')
download.file('https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip')
download.file('https://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip', 'DDPQuiz.zip')
download.file('http://d396qusza40orc.cloudfront.net/devdataprod/DDPQuiz3_1.0.zip', 'DDPQuiz.zip')
unzip('DDPQuiz.zip')
setwd('DDPQuiz3/')
ls
installed.packages('yhatr')
installed.packages('yhatr')
install.packages('yhatr')
install.packages('sqldf')
install.packages('plyr')
install.packages('lubridate', 'stringr', 'ggplot2')
install.packages('lubridate', 'ggplot2')
install.packages('lubridate')
install.packages('ggplot2')
install.packages('RMySQL')
install.packages('reshape2')
install.packages('randomForest')
config <- c(username = "aakashj19@gmail.com", apikey = "a7707c157d24ccff2a07aed5766106f8
", env = "http://cloud.yhathq.com/")
library(yhatr)
require(shiny)
require(httr)
require(rCharts)
key <- '4d1e099188a7028fad88d7bd0ac7353d'
r <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country='India', limit='15', api_key=key, format='json'),
encode='form')
stop_for_status(r)
data <- content(r, 'parsed', 'application/json')
data <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
data <- rbind(x, c(a, l))
}
data <- as.data.frame(data, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
data$Listeners <- as.numeric(x$Listeners)
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar')
plot$xAxis(type='addMeasureAxis', outputFormat="#,")
plot$yAxis(type='addCategoryAxis')
plot
r <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country='India', limit='15', api_key=key, format='json'),
encode='form')
stop_for_status(r)
data <- content(r, 'parsed', 'application/json')
data
require(shiny)
require(httr)
require(rCharts)
key <- '4d1e099188a7028fad88d7bd0ac7353d'
r <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country='India', limit='15', api_key=key, format='json'),
encode='form')
stop_for_status(r)
data <- content(r, 'parsed', 'application/json')
temp <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
temp <- rbind(temp, c(a, l))
}
data <- as.data.frame(temp, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
data$Listeners <- as.numeric(x$Listeners)
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar')
plot$xAxis(type='addMeasureAxis', outputFormat="#,")
plot$yAxis(type='addCategoryAxis')
plot
shiny::runApp('devdataprod')
shiny::runApp('devdataprod')
require(shiny)
require(httr)
require(rCharts)
key <- '4d1e099188a7028fad88d7bd0ac7353d'
r <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country='IN', limit='15', api_key=key, format='json'),
encode='form')
stop_for_status(r)
data <- content(r, 'parsed', 'application/json')
temp <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
temp <- rbind(temp, c(a, l))
}
data <- as.data.frame(temp, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar')
plot$xAxis(type='addMeasureAxis', outputFormat="#,")
plot$yAxis(type='addCategoryAxis')
plot
require(shiny)
require(httr)
require(rCharts)
key <- '4d1e099188a7028fad88d7bd0ac7353d'
r <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country="Lao People's Democratic Republic", limit='15', api_key=key, format='json'),
encode='form')
stop_for_status(r)
data <- content(r, 'parsed', 'application/json')
temp <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
temp <- rbind(temp, c(a, l))
}
data <- as.data.frame(temp, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar')
plot$xAxis(type='addMeasureAxis', outputFormat="#,")
plot$yAxis(type='addCategoryAxis')
plot
require(shiny)
require(httr)
require(rCharts)
key <- '4d1e099188a7028fad88d7bd0ac7353d'
r <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country="INDIA", limit='15', api_key=key, format='json'),
encode='form')
stop_for_status(r)
data <- content(r, 'parsed', 'application/json')
temp <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
temp <- rbind(temp, c(a, l))
}
data <- as.data.frame(temp, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar')
plot$xAxis(type='addMeasureAxis', outputFormat="#,")
plot$yAxis(type='addCategoryAxis')
plot
setwd("~/nationalanthems")
codes <- read.csv('countrycodes.csv')
View(codes)
codes <- read.csv('countrycodes.csv')$country
codes
codes <- read.csv('countrycodes.csv')$country
require(shiny)
require(httr)
require(rCharts)
key <- '4d1e099188a7028fad88d7bd0ac7353d'
r <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country="INDIA", limit='15', api_key=key, format='json'),
encode='form')
stop_for_status(r)
data <- content(r, 'parsed', 'application/json')
temp <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
temp <- rbind(temp, c(a, l))
}
data <- as.data.frame(temp, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar',
title='India')
plot$xAxis(type='addMeasureAxis', outputFormat="#,")
plot$yAxis(type='addCategoryAxis')
plot
require(shiny)
require(httr)
require(rCharts)
r <- POST('http://ws.audioscrobbler.com/2.0/', encode='form',
body=list(method='geo.getTopArtists', country="INDIA", limit='15',
api_key='4d1e099188a7028fad88d7bd0ac7353d', format='json'))
stop_for_status(r)
data <- content(r, 'parsed', 'application/json')
temp <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
temp <- rbind(temp, c(a, l))
}
data <- as.data.frame(temp, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar')
plot$xAxis(type='addMeasureAxis', outputFormat="#,")
plot$yAxis(type='addCategoryAxis')
plot
shiny::runApp()
shiny::runApp()
shiny::runApp()
request <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country=input$country, limit='15',
api_key='4d1e099188a7028fad88d7bd0ac7353d', format='json'),
encode='form')
request <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country='India', limit='15',
api_key='4d1e099188a7028fad88d7bd0ac7353d', format='json'),
encode='form')
codes <- read.csv('countrycodes.csv')$country
class(codes)
codes[5]
request <- POST('http://ws.audioscrobbler.com/2.0/', encode='form',
body=list(method='geo.getTopArtists', country=codes[5], limit='15',
api_key='4d1e099188a7028fad88d7bd0ac7353d', format='json'))
stop_for_status(request)
data <- content(request, 'parsed', 'application/json')
temp <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
temp <- rbind(temp, c(a, l))
}
data <- as.data.frame(temp, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar')
plot$xAxis(type='addMeasureAxis', outputFormat="#,")
plot$yAxis(type='addCategoryAxis')
plot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("~/nationalanthems")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
request <- POST('http://ws.audioscrobbler.com/2.0/',
body=list(method='geo.getTopArtists', country='United States', limit='15',
api_key='4d1e099188a7028fad88d7bd0ac7353d', format='json'),
encode='form')
stop_for_status(request)
data <- content(request, 'parsed', 'application/json')
temp <- matrix(nrow=0, ncol=2)
for(i in 1:15) {
a <- data$topartists$artist[[i]]$name
l <- data$topartists$artist[[i]]$listeners
temp <- rbind(temp, c(a, l))
}
data <- as.data.frame(temp, stringsAsFactors=FALSE)
colnames(data) <- c('Artist', 'Listeners')
data
plot <- dPlot(y='Artist', x='Listeners', groups='Artist', data=data, type='bar')
plot$xAxis(type='addMeasureAxis', outputFormat='#,')
plot$yAxis(type='addCategoryAxis')
plot
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::install_github("timelyportfolio/rCharts@dimple_v2.0.0")
shiny::runApp()
shiny::runApp()
